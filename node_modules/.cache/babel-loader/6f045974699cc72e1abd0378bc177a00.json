{"ast":null,"code":"import _toArray from\"C:/Users/\\u041F\\u043E\\u043B\\u0438\\u043D\\u0430/Desktop/___REACT___/Ra-events-state/node_modules/@babel/runtime/helpers/esm/toArray.js\";export function getFilters(projects){var allCategories=projects.map(function(item){return item.category;});var filters=['All'].concat(Array.from(new Set(allCategories)));return filters;}export function getColumns(projects){var columns=arguments.length>1&&arguments[1]!==undefined?arguments[1]:3;var listByColumns=[];var _projects=_toArray(projects),copy=_projects.slice(0);for(var i=columns;i>0;i--){var amount=copy.length/i;var slicer=copy.length%i?Math.floor(amount)+1:amount;listByColumns.push(copy.splice(0,slicer));}return listByColumns;}","map":{"version":3,"sources":["C:/Users/Полина/Desktop/___REACT___/Ra-events-state/src/functions/portfolioFunctions.js"],"names":["getFilters","projects","allCategories","map","item","category","filters","concat","Array","from","Set","getColumns","columns","listByColumns","copy","i","amount","length","slicer","Math","floor","push","splice"],"mappings":"2JAAA,MAAO,SAASA,CAAAA,UAAT,CAAoBC,QAApB,CAA8B,CACjC,GAAMC,CAAAA,aAAa,CAAGD,QAAQ,CAACE,GAAT,CAAa,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,QAAf,EAAb,CAAtB,CACA,GAAMC,CAAAA,OAAO,CAAG,CAAC,KAAD,EAAQC,MAAR,CAAgBC,KAAK,CAACC,IAAN,CAAW,GAAIC,CAAAA,GAAJ,CAAQR,aAAR,CAAX,CAAhB,CAAhB,CAEA,MAAOI,CAAAA,OAAP,CACD,CAED,MAAO,SAASK,CAAAA,UAAT,CAAoBV,QAApB,CAA2C,IAAbW,CAAAA,OAAa,2DAAH,CAAG,CAChD,GAAMC,CAAAA,aAAa,CAAG,EAAtB,CACA,uBAAkBZ,QAAlB,EAAUa,IAAV,oBAEA,IAAI,GAAIC,CAAAA,CAAC,CAAGH,OAAZ,CAAqBG,CAAC,CAAG,CAAzB,CAA4BA,CAAC,EAA7B,CAAiC,CAC/B,GAAMC,CAAAA,MAAM,CAAGF,IAAI,CAACG,MAAL,CAAcF,CAA7B,CACA,GAAMG,CAAAA,MAAM,CAAGJ,IAAI,CAACG,MAAL,CAAcF,CAAd,CAAkBI,IAAI,CAACC,KAAL,CAAWJ,MAAX,EAAqB,CAAvC,CAA2CA,MAA1D,CACAH,aAAa,CAACQ,IAAd,CAAmBP,IAAI,CAACQ,MAAL,CAAY,CAAZ,CAAeJ,MAAf,CAAnB,EACD,CAED,MAAOL,CAAAA,aAAP,CACD","sourcesContent":["export function getFilters(projects) {\r\n    const allCategories = projects.map((item) => item.category);\r\n    const filters = ['All'].concat( Array.from(new Set(allCategories)));\r\n  \r\n    return filters;\r\n  }\r\n  \r\n  export function getColumns(projects, columns = 3) {\r\n    const listByColumns = [];\r\n    const [...copy] = projects;  \r\n  \r\n    for(let i = columns; i > 0; i--) {\r\n      const amount = copy.length / i;\r\n      const slicer = copy.length % i ? Math.floor(amount) + 1 : amount;        \r\n      listByColumns.push(copy.splice(0, slicer));\r\n    }\r\n    \r\n    return listByColumns;\r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}